#!/usr/bin/env python3

import argparse
import json
import logging
import os
import sys
from datetime import datetime

from igclib.constants import DEFAULT_PROVIDER, MIN_YEAR, TASK_PROVIDERS
from igclib.core.race import Race
from igclib.core.task import Task
from igclib.core.xc import XC
from igclib.crawlers.task_crawler import TaskCrawler

FORMAT = "%(levelname)s : %(message)s"
logging.basicConfig(level=logging.INFO, format=FORMAT)


def check(args):
    if args.command == 'replay' or args.command == 'race':
        if (args.task is None and args.flights is None) and args.path is None:
            raise ValueError('Specify --task and --flights or --path')

    elif args.command == 'optimize':
        pass

    elif args.command == 'crawl':
        if args.year < MIN_YEAR:
            logging.info(f'{args.year} is clipped to {MIN_YEAR}')
            args.year = MIN_YEAR
        elif args.year > datetime.now().year:
            logging.info(f'{args.year} is clipped to {datetime.now().year}')
            args.year = datetime.now().year

    elif args.command == 'xc':
        pass

    return args


def argument_parser():
    parser = argparse.ArgumentParser(description='igclib command line tool')

    commands = parser.add_subparsers(dest='command', help='Mode of operation')
    commands.required = True

    parser_replay = commands.add_parser('replay', help='Create a replay of the race')
    parser_replay.add_argument('--progress', choices=['gui', 'ratio', 'silent'], default='gui', help='Display progress bar, print progress ratio or run silently.')
    parser_replay.add_argument('--task', type=str, help='Task file or b64 encoding')
    parser_replay.add_argument('--path', type=str, help='Previously saved race [*.pkl]')
    parser_replay.add_argument('--flights', type=str, help='IGC tracks directory or zip file')
    parser_replay.add_argument('--output', type=str, required=True, nargs='+', help='Save the output [*.pkl, *.json, -]')

    parser_race = commands.add_parser('race', help='Create a race')
    parser_race.add_argument('--progress', choices=['gui', 'ratio', 'silent'], default='gui', help='Display progress bar, print progress ratio or run silently.')
    parser_race.add_argument('--task', type=str, help='Task file or b64 encoding')
    parser_race.add_argument('--path', type=str, help='Previously saved Race or Replay [*.pkl]')
    parser_race.add_argument('--flights', type=str, help='IGC tracks directory or zip file')
    parser_race.add_argument('--output', type=str, required=True, nargs='+', help='Save the output [*.pkl, *.json, -]')

    parser_task = commands.add_parser('optimize', help='Optimize a task')
    parser_task.add_argument('--output', type=str, required=True, nargs='+', help='Save the output [*.json, -]')
    parser_task.add_argument('--task', type=str, help='Task file or b64 encoding', required=True)
    parser_task.add_argument('--progress', choices=['gui', 'ratio', 'silent'], default='gui', help='Display progress bar, print progress ratio or run silently.')

    parser_crawl = commands.add_parser('crawl', help='Crawl providers for data')
    parser_crawl.add_argument('--output', type=str, required=True, nargs='+', help='Save the output [*.json, -]')
    parser_crawl.add_argument('--year', type=int, default=datetime.now().year, help='Fetch tasks from a particular year')
    parser_crawl.add_argument('--provider', choices=TASK_PROVIDERS.keys(), default=DEFAULT_PROVIDER, help='Tasks provider')
    parser_crawl.add_argument('--progress', choices=['gui', 'ratio', 'silent'], default='gui', help='Display progress bar, print progress ratio or run silently.')

    parser_watch = commands.add_parser('watch', help='Watch a pilot during the race')
    parser_watch.add_argument('--path', type=str, help='Previously saved race [*.pkl]', required=True)
    parser_watch.add_argument('--progress', choices=['gui', 'ratio', 'silent'], default='gui', help='Display progress bar, print progress ratio or run silently.')
    parser_watch.add_argument('--pilot', type=str, help='ID of the pilot to watch', required=True)
    parser_watch.add_argument('--output', type=str, required=True, nargs='+', help='Save the output [*.json, -]')

    parser_xc = commands.add_parser('xc', help='Create a XC scorer')
    parser_xc.add_argument('--progress', choices=['gui', 'ratio', 'silent'], default='gui', help='Display progress bar, print progress ratio or run silently.')
    parser_xc.add_argument('--airspace', type=str, help='Airspace OpenAir file')
    parser_xc.add_argument('--flights', type=str, help='IGC track')
    parser_xc.add_argument('--output', type=str, required=True, nargs='+', help='Save the output [*.json, -]')

    args = parser.parse_args()
    return check(args)


if __name__ == '__main__':
    args = argument_parser()

    if args.command == 'race':
        if args.path is not None:
            race = Race(path=args.path, progress=args.progress)
        else:
            race = Race(tracks=args.flights, task=args.task, progress=args.progress)
        race.save(output=args.output)

    elif args.command == 'optimize':
        task = Task(args.task, progress=args.progress)
        task.save(output=args.output)

    elif args.command == 'crawl':
        crawler = TaskCrawler(args.provider, args.year, args.progress)
        crawler.save(output=args.output)

    elif args.command == 'watch':
        race = Race(path=args.path, progress=args.progress)
        series = race.pilot_schema(args.pilot, output=args.output)

    elif args.command == 'replay':
        race = Race(path=args.path, tracks=args.flights, task=args.task, validate=False, progress=args.progress)
        race.save(output=args.output)

    elif args.command == 'xc':
        xc = XC(tracks=args.flights, airspace=args.airspace, progress=args.progress)
        xc.save(output=args.output)
