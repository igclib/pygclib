#!/usr/bin/env python3

import argparse
import json
import os
from datetime import datetime

from igclib.constants import DEFAULT_PROVIDER, MIN_YEAR, TASK_PROVIDERS
from igclib.crawlers.task_crawler import TaskCrawler
from igclib.model.race import Race
from igclib.model.task import Task


def check(args):
    if args.command == 'race':
        #if os.path.isfile(args.task):
        #    task_type = 'file'
        #else:
        #    task_type = 'json'
        #if args.flights is None and task_type =='file':
        #    raise ValueError(f'If --task is a file, you must specify flights directory with --flights argument')
        #if task_type == 'file' and not os.path.isdir(args.flights):
        #    raise ValueError(f'Flights path "{args.flights}" is not a directory')
        #if task_type == 'file' and len(os.listdir(args.flights)) == 0:
        #    raise ValueError('Flights directory is empty')
        pass

    elif args.command == 'optimize':
        pass
    
    elif args.command == 'crawl':
        if args.year is None or not MIN_YEAR < args.year <= datetime.now().year:
            raise ValueError(f'Year must be in range [{2010}, {datetime.now().year}]')



def argument_parser():
    parser = argparse.ArgumentParser(description='igclib command line tool')
    parser.add_argument('--progress', choices=['gui', 'ratio', 'silent'], default='gui', help='Display progress bar, print progress ratio or run silently.')

    commands = parser.add_subparsers(dest='command', help='Mode of operation')
    commands.required = True 


    parser_race = commands.add_parser('race', help='Create a race')
    parser_race.add_argument('--task', type=str, help='Path or string of the task', required=True)
    parser_race.add_argument('--flights', type=str, help='Path to the IGC tracks directory')
    parser_race.add_argument('--output', type=str, help='File to which you want to save the output')
    parser_race.add_argument('--n_jobs', type=int, default=-1, help='Number of CPU cores used for task validation (-1 to use all cores)')

    parser_task = commands.add_parser('optimize', help='Optimize a task')
    parser_task.add_argument('--output', type=str, help='File to which you want to save the output')
    parser_task.add_argument('--task', type=str, help='Path or string of the task', required=True)

    parser_crawl = commands.add_parser('crawl', help='Crawl providers for data')
    parser_crawl.add_argument('--output', type=str, help='File to which you want to save the output')
    parser_crawl.add_argument('--year', type=int, default=datetime.now().year, help='Fetch task from this year')
    parser_crawl.add_argument('--provider', choices=TASK_PROVIDERS.keys(), default=DEFAULT_PROVIDER, help='Tasks provider') 
    
    parser_watch = commands.add_parser('watch', help='Watch a pilot during the race')
    parser_watch.add_argument('--path', type=str, help='Path to a previously saved race (.pkl)', required=True)
    parser_watch.add_argument('--pilot', type=str, help='ID of the pilot to watch', required=True)

    args = parser.parse_args()
    check(args)
    return args

if __name__ == '__main__':

    # parse and check arguments
    args = argument_parser()
  
    if args.command == 'race':
        race =  Race(tracks_dir=args.flights, task_file=args.task, n_jobs=args.n_jobs, progress=args.progress)
        race.save(output=args.output)

    elif args.command == 'optimize':
        task = Task(args.task)
        task.optimized(output=args.output)

    elif args.command == 'crawl':
        crawler = TaskCrawler(args.provider, args.year, args.progress)
        crawler.crawl(output=args.output)

    elif args.command == 'watch':
        race =  Race(path=args.path, progress=args.progress)
        race.pilot_schema(args.pilot)