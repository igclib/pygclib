#!/usr/bin/env python3

import argparse
import os

from igclib.model.race import Race
from igclib.model.task import Task


def check(args):
    if args.mode == 'race':
        if args.task is None or not os.path.isfile(args.task):
            raise ValueError('Task path is not valid')
        if not os.path.isdir(args.flights):
            raise ValueError('Flights path is not a directory')
        if len(os.listdir(args.flights)) == 0:
            raise ValueError('Flights directory is empty')
        os.makedirs(os.path.basename(args.output), exist_ok=True)

    elif args.mode == 'optimize':
        if args.task is None or not os.path.isfile(args.task):
            raise ValueError('Task path is not valid')


def argument_parser():
    parser = argparse.ArgumentParser(description='igclib')
    parser.add_argument('--mode', choices=['race', 'optimize'], help='Mode of operation')    
    parser.add_argument('--task', type=str, help='Path to the task file')    
    parser.add_argument('--flights', type=str, help='Path to the IGC tracks directory')
    parser.add_argument('--output', type=str, help='Path to which you want to save the output')
    parser.add_argument('--n_jobs', type=int, default=-1, help='Number of CPU cores used for task validation (-1 to use all cores)')

    args = parser.parse_args()
    check(args)
    return args

if __name__ == '__main__':

    # parse and check arguments
    args = argument_parser()
    
    if args.mode == 'race':
        r =  Race(args.flights, args.task, args.n_jobs)
        r.save(args.output)
    elif args.mode == 'optimize':
        t = Task(args.task)
        if args.output is not None:
            with open(args.output, 'r') as f:
                f.write(t.to_json())
        else:
            print(t.to_json())
